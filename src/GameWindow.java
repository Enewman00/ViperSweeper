
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Newman_853963
 */
public class GameWindow extends javax.swing.JFrame {
    
    // Instance Variables
    private Tile[][] grid;
    private int gridSize = 9;
    private int numBombs;
    private int remaining;
    private boolean pressed;

    /**
     * Creates new form GameWindow
     */
    public GameWindow() {
        initComponents();
        
        
        
        initializeGrid();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stat_jPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        flags_label = new javax.swing.JLabel();
        face_button = new javax.swing.JButton();
        game_jPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGame_menuItem = new javax.swing.JMenuItem();
        gameOptions_menu = new javax.swing.JMenu();
        gridSize_menuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Flags Remaining:");

        face_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                face_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat_jPanelLayout = new javax.swing.GroupLayout(stat_jPanel);
        stat_jPanel.setLayout(stat_jPanelLayout);
        stat_jPanelLayout.setHorizontalGroup(
            stat_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat_jPanelLayout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(flags_label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(face_button, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );
        stat_jPanelLayout.setVerticalGroup(
            stat_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat_jPanelLayout.createSequentialGroup()
                .addGroup(stat_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stat_jPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(face_button, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(stat_jPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(stat_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(flags_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout game_jPanelLayout = new javax.swing.GroupLayout(game_jPanel);
        game_jPanel.setLayout(game_jPanelLayout);
        game_jPanelLayout.setHorizontalGroup(
            game_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        game_jPanelLayout.setVerticalGroup(
            game_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        newGame_menuItem.setText("New Game");
        newGame_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGame_menuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newGame_menuItem);

        jMenuBar1.add(jMenu1);

        gameOptions_menu.setText("Game Options");

        gridSize_menuItem.setText("Grid Size");
        gridSize_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridSize_menuItemActionPerformed(evt);
            }
        });
        gameOptions_menu.add(gridSize_menuItem);

        jMenuBar1.add(gameOptions_menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stat_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(game_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(stat_jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(game_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gridSize_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridSize_menuItemActionPerformed
        gridSize = Integer.parseInt(JOptionPane.showInputDialog(this,"Enter your grid size","Grid Size",1));
        if (gridSize < 9) {
            JOptionPane.showMessageDialog(this, "Sorry, you can't do any size lower than 9.");
            gridSize = 9;
        }
        else {
            for (int r = 0; r < grid.length; r++) {
                for (int c = 0; c < grid.length; c++) {
                    grid[r][c].setIcon(null);
                }
            }
            initializeGrid();
        }
        
    }//GEN-LAST:event_gridSize_menuItemActionPerformed

    private void newGame_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGame_menuItemActionPerformed
        resetGame();
    }//GEN-LAST:event_newGame_menuItemActionPerformed

    private void face_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_face_buttonActionPerformed
        resetGame();
    }//GEN-LAST:event_face_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton face_button;
    private javax.swing.JLabel flags_label;
    private javax.swing.JMenu gameOptions_menu;
    private javax.swing.JPanel game_jPanel;
    private javax.swing.JMenuItem gridSize_menuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newGame_menuItem;
    private javax.swing.JPanel stat_jPanel;
    // End of variables declaration//GEN-END:variables

    private void initializeGrid() {
        
        // Set the size of the grid, and instantiate each Tile in grid
        grid = new Tile[gridSize][gridSize];
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid.length; c++) {
                grid[r][c] = new Tile(r, c);
            }
        }
        
        // Generate the tiles in the grid
        game_jPanel.setLayout(new GridBagLayout());
        
        // Generate Constraints for the Layout Manager
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid.length; c++) {
                
                Tile square = grid[r][c];
                
                //Specifies the x, y, coordinates of the grid
                GridBagConstraints constraints = new GridBagConstraints();
                constraints.gridx = c;
                constraints.gridy = r;
                constraints.weightx = 0;
                constraints.weighty = 0;
                
                // Add the tile to the panel with the constraints
                game_jPanel.add(square, constraints);
                
                square.setIcon(new ImageIcon("pictures/blank2.gif", "blank2"));
                
                // Add a MouseListener anonymously, and overided onClick method
                square.addMouseListener(new MouseListener() {

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        mouseActionPerformed(e);
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                        pressed = true;
                        face_button.setIcon(new ImageIcon("pictures/uhoh.png", "suprisedish face"));
                        if (!square.isRevealed() && !square.isFlag()) {
                            square.setIcon(new ImageIcon("pictures/blank3.gif", "pressed blank"));
                        }
                    }
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        pressed = false;
                        
                        face_button.setIcon(new ImageIcon("pictures/happy.png", "happy"));
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {}

                    @Override
                    public void mouseExited(MouseEvent e) {
                        if (square.isFlag()) {
                            return;
                        }
                        if (pressed = true && !square.isRevealed()) {
                            square.setIcon(new ImageIcon("pictures/blank2.gif", "unpressed blank"));
                        }
                    }
                        
                    
                });
                
                
                
            }
        }
        
        
        
        
        // Number of bombs is 5% of total tiles
        numBombs =  (int) ((grid.length * grid.length) * .08);
        remaining = numBombs;
        
        // Adds the bombs to the grid, then adds one to the numBombs of the tiles around it
        for (int i = 0; i < numBombs; i++) {
            //create random spot for bomb
            int x = (int)(Math.random() * (grid.length - 1));
            int y = (int)(Math.random() * (grid.length - 1));
            
            // adds bomb to spot as long as that spot isn't taken
            boolean run = true;
            while (run == true) {
                if (grid[x][y].getNumBombs() != 9) {
                    grid[x][y].setNumBombs(9);
                    run = false;
                }
                else {
                    x = (int)(Math.random() * (grid.length - 1));
                    y = (int)(Math.random() * (grid.length - 1));
                }
            }
            
            Tile check = null;
            // Calculates the numbers on all sides of the bomb
            if (x + 1 < grid.length) {
                check = grid[x + 1][y];
                //if the right is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (x - 1 >= 0) {
                check = grid[x - 1][y];
                //if the left is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (y + 1 < grid.length) {
                check = grid[x][y + 1];
                //if the up is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (y - 1 >= 0) {
                check = grid[x][y - 1];
                //if the down is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (x - 1 >= 0 && y + 1 < grid.length) {
                check = grid[x - 1][y + 1];
                //if the up left is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (x + 1 < grid.length && y + 1 < grid.length) {
                check = grid[x +  1][y + 1];
                //if the up right is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (x - 1 >= 0 && y - 1 >= 0) {
                check = grid[x - 1][y - 1];
                //if the down left is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
            if (x + 1 < grid.length && y - 1 >= 0) {
                check = grid[x + 1][y - 1];
                //if the down right is not a bomb
                if (check.getNumBombs() != 9) {
                    check.setNumBombs(check.getNumBombs() + 1); // right
                }
            }
            
        }
        flags_label.setText("" + remaining);
        face_button.setIcon(new ImageIcon("pictures/happy.png", "suprisedish face"));
        // Generate a random set of bombs. 
        // Bombs will be 5% of the total number of tiles.
        // Calculate all of the numbers for adjacent tile numbers for the tiles.
        
        
        
        
    } //end of generate grid
    
    private void mouseActionPerformed(MouseEvent e) {
        //#BunnyMagic
        // Tile that mouse was clicked
        Tile square = (Tile) e.getSource();
        
        int button = e.getButton();
        int x = square.getGridX();
        int y = square.getGridY();
        // Right click
        if (button == 3 && square.isRevealed() == false) {
            
            //square.setRevealed(true);
            if (!square.isFlag()) {
                square.setIcon(new ImageIcon("pictures/flag.gif", "flag"));
                square.setFlag(true);
                remaining--;
            }
            else {
                square.setIcon(new ImageIcon("pictures/blank2.gif", "blank2"));
                square.setFlag(false);
                remaining++;
                //square.setRevealed(false);
            }
            winCheck();
            
            
        }
        // Left Click
        else if (button == 1) {
            // Recursively reveals area
            reveal(y, x);
        }
        
        
        // Get the button clicked from the mouse
        // 0 - no button pressed
        // 1 - left mouse button
        // 2 - mouse wheel clicked
        // 3 - right mouse button
        
        
        
        
        // Get the x/y coordinate in the grid
        
        
        System.out.println(x + ":" + y + "," + button + ", " + square.getNumBombs());
        flags_label.setText("" + remaining);
        
        
        
        
    }
    
    private void reveal(int r, int c) {
        // Reveals tiles around the square until there is a number?
        if (r >= 0 && r < grid.length && c >= 0 && c < grid.length) {
            // check for bounds\
        
            //if it's already been revealed, return
            if (grid[r][c].isRevealed()) {
                return;
            }
            if (grid[r][c].isFlag()) {
                return;
            }






            if (grid[r][c].getNumBombs() == 1) {
                grid[r][c].setIcon(new ImageIcon("pictures/one.gif", "one"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 2) {
                grid[r][c].setIcon(new ImageIcon("pictures/two.gif", "two"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 3) {
                grid[r][c].setIcon(new ImageIcon("pictures/three.gif", "three"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 4) {
                grid[r][c].setIcon(new ImageIcon("pictures/four.gif", "four"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 5) {
                grid[r][c].setIcon(new ImageIcon("pictures/five.gif", "five"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 6) {
                grid[r][c].setIcon(new ImageIcon("pictures/six.gif", "six"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 7) {
                grid[r][c].setIcon(new ImageIcon("pictures/seven.gif", "seven"));
                grid[r][c].setRevealed(true);
            }

            else if (grid[r][c].getNumBombs() == 8) {
                grid[r][c].setIcon(new ImageIcon("pictures/eight.gif", "eight"));
                grid[r][c].setRevealed(true);
            }
            else if (grid[r][c].getNumBombs() == 9) {
                //game_jPanel.setVisible(false);
                grid[r][c].setIcon(new ImageIcon("pictures/snake.gif", "snake"));
                face_button.setIcon(new ImageIcon("pictures/dead.png", "dead face"));
                int answer = JOptionPane.showConfirmDialog(this, "You Lost :(\nWould you like to start a new game?"); //== JOptionPane.NO_OPTION)
                if (answer == JOptionPane.YES_OPTION){
                    resetGame();
                }
                else this.dispose();
                
                return;
            }
            //------------------------------------------------------------------------
            //countBombs(grid[r][c]);
            if (grid[r][c].getNumBombs() != 0) return;

            grid[r][c].setRevealed(true);
            grid[r][c].setIcon(new ImageIcon("pictures/empty.gif", "empty"));

            //recursively reveals all corners...
    
            for (int i = (c - 1); i < (c + 2); i++) {
                reveal(r - 1, i);
            }


            reveal(r, c - 1);
            reveal(r, c + 1);


            for (int i = (c - 1); i < (c + 2); i++) {
                reveal(r + 1, i);
            }
            //recursively reveal the ones around
            //has to make sure it is in bounds first

        
        }
        else return;
        
        //check to see if r and c are out of bounds
        // reveal the tile
        // if it's a 0, reveal around it
    }
    
    public void resetGame() {
        
        game_jPanel.removeAll();
//        for (int r = 0; r < grid.length; r++) {
//            for (int c = 0; c < grid.length; c++) {
//                grid[r][c].setIcon(null);
//            }
//        }
        initializeGrid();
        
    }
    
    public void winCheck() {
        int count = 0;
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid.length; c++) {
                if (grid[r][c].getNumBombs() == 9 && grid[r][c].isFlag()) {
                    count++;
                }
            }
        }
        if (count == numBombs && remaining == 0) {
            face_button.setIcon(new ImageIcon("pictures/sunglasses.png", "winning face"));
            int answer = JOptionPane.showConfirmDialog(this, "You Won! :)\nWould you like to start a new game?"); //== JOptionPane.NO_OPTION)
                if (answer == JOptionPane.YES_OPTION){
                    resetGame();
                }
                else this.dispose();
        }
    }
    
    
    
}
